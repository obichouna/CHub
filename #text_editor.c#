#include <unistd.h>
#include <termios.h>
#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <errno.h>
// to start new line must type \r\n
struct termios orig_termios;
void die(const char *s){
  perror(s);
  exit(1);
}
void disableRawMode(){
  tcsetattr(STDIN_FILENO, TCSAFLUSH, &orig_termios);
  die("tcsettattr");
}
void enableRawMode(){
  if(tcgetattr(STDIN_FILENO,&orig_termios)== -1) die("tcgetattr");
  //tcgetattr() reads terminal attributes into termios
  atexit(disableRawMode);
  //atexit() calls automatically when programs exits 
  struct termios raw = orig_termios;
  raw.c_iflag &=~(BRKINT | ICRNL|INPCK |ISTRIP |IXON);
  raw.c_iflag &=~(ICRNL |IXON);
  //IXON turns off ctrl-s and ctrlq
  //ICRNL fixes ctrl-m to read 13 instead of 10
  raw.c_oflag &= ~(OPOST);
  raw.c_cflag |= (CS8);
  raw.c_lflag &= ~(ECHO |ICANON|IEXTEN|ISIG);
  //flipping bits
  //ECHO causes each key you type to be printed to the terminal
  //ISIG turns off ctrl-c and ctrl-z signals
  //ICANON turns off canonical mode allowing us to read byte by byte
  //IEXTEN turns off ctrl-v
  raw.c_cc[VMIN] = 0;
  raw.c_cc[VTIME] =1;
  if( tcsetattr(STDIN_FILENO, TCSAFLUSH, &raw)== -1) die("tcsetattr");
  //tcsetattr allows you to apply attributes after modifying them
  //TCSAFLUSH specifies when to apply the change
  //waits for output to be written then discards input that hasnt been read
  //c_lflag is for "local flags" 
}

int main(){
  enableRawMode();
  while(1){
    char c = '\0';
    if(read(STDIN_FILENO, &c,1)== -1 && errno !=EAGAIN) die("read");
    if(iscntrl(c)){
      //iscntrl checks whether character is a control character 
      printf("%d\r\n", c);
    }else {
      printf("%d('%c')\r\n", c,c);
    }
    if (c == 'q')break;
  }
  //press q to quit
  
  return 0;
}
